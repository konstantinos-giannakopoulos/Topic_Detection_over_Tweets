package lda;

import java.io.File;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;

import jgibblda.*;
//
import client.Tweet;
import lexical.Lexical;
import model.MultinomialDistribution;

/**
 * Template pattern.
 */
public abstract class LDATemplate {
    
    private static final String CURDIR = System.getProperty("user.dir"); 
    private static final String LDA_FOLDER = CURDIR + "/ldaFiles";

    protected List<Tweet> tweets;
    protected MultinomialDistribution multDistr;
    private Lexical lexical = new Lexical();

    public final void runTemplate(String modelName) {
	//String infile = "input.txt";
	String infile = "input-" + modelName + ".txt";
	String path = LDA_FOLDER + File.separator + infile;
	List<String>  words = new ArrayList<String>();
	List<Integer> index = new ArrayList<Integer>();

	doCreateInputFolder(); // creates ldaFiles directory
	doCreateLDAInputFiles(tweets, path); // creates input.txt file
	doRunLDAAlgorithm(modelName); //estimate, estimateCont, infer
    } // runTemplate()

    private void doCreateInputFolder() {
	File inputFolder = new File(LDA_FOLDER);
	inputFolder.mkdir();	
    } // doCreateInputFolder()

    /**
     * Creates input.txt file.
     */
    private void doCreateLDAInputFiles(List<Tweet> tweets, String path) {
	BufferedWriter bw = null;
	try{
	    bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(path),"UTF-8"));
	    bw.write(tweets.size() + "\n");
	    for(Tweet tweet : tweets) {
		String msg = tweet.message.replace("\n"," ");
		List<String> tokens = lexical.process(msg);
		//System.out.println(tokens);
		for(String token : tokens) {
		    if(!token.equals("rt") && (!token.startsWith("https://")) && (!token.startsWith("@")) )
			if(token.length() < 15)
			    bw.write(token + " ");
		}
		bw.write("\n");
		bw.flush();
	    }
	    bw.flush();	    
	    bw.close();
	} catch(IOException e) {
	    e.printStackTrace();
	}
    } // doCreateLDAInputFiles()

    public abstract void doRunLDAAlgorithm(String modelName);

    /*
    private void doReadLDAOutputFiles(String folder, String filename, List<String> words, List<Integer> index) {
	System.out.println("Start reading conversation LDA output file."); 
	try {
	    FileReader fileReader = new FileReader(filename);
	    BufferedReader bufferedReader = new BufferedReader(fileReader);

	    String line; 
	    String delimiters   = "[:| ]+";        
	    /* Process the files that are generated by LDA *
	    while((line = bufferedReader.readLine()) != null){
		/* collect words from each topic*
		String[] tokens = line.split(delimiters);
		if(tokens[0].equals("Topic")){
		    index.add(words.size());
		} else {
		    words.add(tokens[0].trim());
		}
	    }
	    fileReader.close();
	    bufferedReader.close();	    
	} catch(Exception ex) {
	    ex.printStackTrace();
	}
    }

    private List<Topic> doExtractTopics(List<String> words, List<Integer> index, int id) {
	System.out.println("Start extracting conversation topics."); 
	List<Topic> topicList = new ArrayList<Topic>();
	for(int i=0; i < index.size(); i++){    
	    int nextIndexPosition = i+1;
	    int startWordOffset = index.get(i);
	    int endWordOffset;
	    if(nextIndexPosition < index.size()){
		endWordOffset = index.get(nextIndexPosition);
	    } else {
		endWordOffset = words.size();
	    }      
	    Topic topic = new Topic(words.subList(startWordOffset, endWordOffset), id);
	    topicList.add(topic);
	    for(String word : topic.getTopWords()) {
		    Dictionary.getInstance().add(word);
	    }
		//Dictionary.getInstance().addAll(topic.getTopWords());    
	}
	return topicList;
    }

    private void appendGlobalTopicList(List<Topic> listofTweetitemsTopics) {
	TopicList.getInstance().addAll(listofTweetitemsTopics);
    }


    public void doFreeDiskSpace(File folder) {
	File[] files = folder.listFiles();
	if(files!=null) { 
	    for(File f: files) {
		if(f.isDirectory()) {
		    doFreeDiskSpace(f);
		} else {
		    f.delete();
		}
	    }
	}
	folder.delete();	
    }*/
}
